// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Ken-ji de la Rosa, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE Focal Plane Assembly simulator.
//
//                              fpasim-fw is free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                   kenji.delarosa@alten.com
//    @file                   ADS62P49.py
// -------------------------------------------------------------------------------------------------------------
//    Automatic Generation    No
//    Code Rules Reference
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//   This javscript generates spi commands in order to initialize the ads62P49 (ADCs) registers.
//
//   Note:
//      . Tested with javascript
//
// -------------------------------------------------------------------------------------------------------------

// import javascript
include("./fpasim/utils_tools.dscript");
include("./fpasim/fpasim_address.dscript");
include("./fpasim/fpasim_tools.dscript");


function check_equal_ram(tab0_p, tab1_p)

{

    error = 0;

    for (i = 0; i <= tab0_p.length; i++)

    {

        value0 = tab0_p[i];

        value1 = tab1_p[i];

        if (value0 != value1)

        {

            error = 1;

        }

    }

    return error;

}

function test_conf_ram() {

    //sendToFPA_loadTES_PulseShape(32768);
    //sendToFPA_loadAmpSQUID_TF(16384);
    //sendToFPA_loadMuxSQUID_TF(8192);
    //sendToFPA_loadTES_SteadyState(64);
    //sendToFPA_loadMuxSQUID_Offset(64);

    /*
    configure test_pulse_shape
    */

    tab_length = 32768;
    tes_pulse_shape_tab = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        tes_pulse_shape_tab[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 1;
        }
    }


    sendToFPA_loadTES_PulseShape(tes_pulse_shape_tab);

    /*
    configure amp_squid_tf
    */

    tab_length = 16384;
    amp_squid_tf_tab = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        amp_squid_tf_tab[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 2;
        }
    }
    sendToFPA_loadAmpSQUID_TF(amp_squid_tf_tab);

    /*
    configure mux_squid_tf
    */

    tab_length = 8192;
    mux_squid_tf_tab = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        mux_squid_tf_tab[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 3;
        }
    }
    sendToFPA_loadMuxSQUID_TF(mux_squid_tf_tab);

    /*
    configure test_steady_state
    */

    tab_length = 64;
    tes_steady_state_tab = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        tes_steady_state_tab[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 4;
        }
    }
    sendToFPA_loadTES_SteadyState(tes_steady_state_tab);

    /*
    configure mux_squid_offset
    */

    tab_length = 64;
    mux_squid_offset_tab = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        mux_squid_offset_tab[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 5;
        }
    }
    sendToFPA_loadMuxSQUID_Offset(mux_squid_offset_tab);

    sendToFPA_readAllRegisters();
    waitMs(2000);


    getLatestValue("FPA_TES_PULSE_SHAPE");
    getLatestValue("FPA_AMP_SQUID_TF");
    getLatestValue("FPA_MUX_SQUID_TF");
    getLatestValue("FPA_TES_STD_STATE");
    getLatestValue("FPA_MUX_SQUID_OFFSET");

    print("FPA_TES_PULSE_SHAPE");
    print(FPA_TES_PULSE_SHAPE);

    error = check_equal_ram(tab0_p = FPA_TES_PULSE_SHAPE, tab1_p = tes_pulse_shape_tab);

    if (error == 0)

    {

        print("OK");

    } else

    {

        print("KO");

    }

    print("");


    print("FPA_AMP_SQUID_TF");
    print(FPA_AMP_SQUID_TF);

    error = check_equal_ram(tab0_p = FPA_AMP_SQUID_TF, tab1_p = amp_squid_tf_tab);

    if (error == 0)

    {

        print("OK");

    } else

    {

        print("KO");

    }

    print("");


    print("FPA_MUX_SQUID_TF");
    print(FPA_MUX_SQUID_TF);



    error = check_equal_ram(tab0_p = FPA_MUX_SQUID_TF, tab1_p = mux_squid_tf_tab);

    if (error == 0)

    {

        print("OK");

    } else

    {

        print("KO");

    }

    print("");


    print("FPA_TES_STD_STATE");
    print(FPA_TES_STD_STATE);

    error = check_equal_ram(tab0_p = FPA_TES_STD_STATE, tab1_p = tes_steady_state_tab);

    if (error == 0)

    {

        print("OK");

    } else

    {

        print("KO");

    }

    print("");


    print("FPA_MUX_SQUID_OFFSET");
    print(FPA_MUX_SQUID_OFFSET);



    error = check_equal_ram(tab0_p = FPA_MUX_SQUID_OFFSET, tab1_p = mux_squid_offset_tab);

    //error = check_equal_ram(tab0_p=FPA_MUX_SQUID_OFFSET,tab1_p=tes_steady_state_tab);

    if (error == 0)

    {

        print("OK");

    } else

    {

        print("KO");

    }

    print("");

}

/* 
 ***************************************************************************
 * reset the fpasim function
 ***************************************************************************
 */

msg = "Reset the fpasim function";
display_title(msg_p = msg, level_p = 0, mode_p = 0);
//fpasim_reset(level_p=0, mode_p=0, verbosity_p=0);


test_conf_ram();


print("");
print("Read All wire_out");
//Operator_name = getText("Please, type the operator name:", "")
waitMs(600);

getLatestValue("FPA_WireOutValues");

for (i = 0; i < 32; ++i) {
    print((0x20 + i).toString(16) + ": ", FPA_WireOutValues[i].toString(16));
}