// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Ken-ji de la Rosa, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE Focal Plane Assembly simulator.
//
//                              fpasim-fw is free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                   kenji.delarosa@alten.com
//    @file                   fpasim_test_make_pulse_generation.dscript
// -------------------------------------------------------------------------------------------------------------
//    Automatic Generation    No
//    Code Rules Reference
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//   This javascript does the following steps:
//      1. configure the spi devices
//      2. reset the FPGA functions
//      3. configure the FPASIM functions
//      4. generate few make_pulse command
//      4. generate few make_pulse_all command
//
//
// -------------------------------------------------------------------------------------------------------------

// import javascript
include("./fpasim/utils_tools.dscript");
include("./fpasim/fpasim_address.dscript");
include("./fpasim/fpasim_tools.dscript");




function convert_percentage_to_pulse_heigth(percentage_p) {

    const value = percentage_p * (Math.pow(2, 16) - 1) / 100;
    return Math.round(value);
}

function tes_steady_state_conf_ram() {


    const tab_length = 64;
    pulse_shape = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        //pulse_shape[i] = 0xE666;
        pulse_shape[i] = 0xFFFF;
    }

    //sendToFPA_loadTES_PulseShape(32768);
    //sendToFPA_loadAmpSQUID_TF(16384);
    //sendToFPA_loadMuxSQUID_TF(8192);
    //sendToFPA_loadTES_SteadyState(64);
    //sendToFPA_loadMuxSQUID_Offset(64);

    //sendToFPA_loadTES_PulseShape(pulse_shape);
    //sendToFPA_loadAmpSQUID_TF(pulse_shape);
    //sendToFPA_loadMuxSQUID_TF(pulse_shape);
    sendToFPA_loadTES_SteadyState(pulse_shape);
    //sendToFPA_loadMuxSQUID_Offset(pulse_shape);

}

function mux_quid_tf_conf_ram() {


    const tab_length = 8192;
    pulse_shape = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        pulse_shape[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 1;
        }
    }

    //sendToFPA_loadTES_PulseShape(32768);
    //sendToFPA_loadAmpSQUID_TF(16384);
    //sendToFPA_loadMuxSQUID_TF(8192);
    //sendToFPA_loadTES_SteadyState(64);
    //sendToFPA_loadMuxSQUID_Offset(64);

    //sendToFPA_loadTES_PulseShape(pulse_shape);
    //sendToFPA_loadAmpSQUID_TF(pulse_shape);
    sendToFPA_loadMuxSQUID_TF(pulse_shape);
    //sendToFPA_loadTES_SteadyState(pulse_shape);
    //sendToFPA_loadMuxSQUID_Offset(pulse_shape);

}

function amp_quid_tf_conf_ram() {


    const tab_length = 16384;
    pulse_shape = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        pulse_shape[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 1;
        }
    }

    //sendToFPA_loadTES_PulseShape(32768);
    //sendToFPA_loadAmpSQUID_TF(16384);
    //sendToFPA_loadMuxSQUID_TF(8192);
    //sendToFPA_loadTES_SteadyState(64);
    //sendToFPA_loadMuxSQUID_Offset(64);

    //sendToFPA_loadTES_PulseShape(pulse_shape);
    sendToFPA_loadAmpSQUID_TF(pulse_shape);
    //sendToFPA_loadMuxSQUID_TF(pulse_shape);
    //sendToFPA_loadTES_SteadyState(pulse_shape);
    //sendToFPA_loadMuxSQUID_Offset(pulse_shape);

}



function main() {


    const level0 = 0;
    const level1 = level0 + 1;
    const level2 = level0 + 2;

    const mode_p = 0;
    const verbosity_p = 0;

    /* 
     ***************************************************************************
     * display the test description
     ***************************************************************************
     */
    msg = "Test description";
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);

    msg = "This test is used to realize electrical measurement or visualization on the following ouptput:";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);

    msg = [
        "sync/ref ouptput",
        "dac output",
        ""
    ];
    display(msg_p = msg, level_p = level2, mode_p = mode_p);

    msg = "This test does the following steps:"
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    msg = [
        "1. configure the spi devices",
        "2. reset the FPGA functions",
        "3. configure the FPASIM functions",
        "4. generate few make_pulse command",
        "4. generate few make_pulse_all command"
    ]
    display(msg_p = msg, level_p = level2, mode_p = mode_p);


    /* 
     ***************************************************************************
     * display the script info
     ***************************************************************************
     */
    fpasim_script_info(level_p = level0, mode_p = mode_p, verbosity_p = 2);

    /* 
     ***************************************************************************
     * configure spi devices
     ***************************************************************************
     */
    msg = "Configure spi devices";
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);
    configure_fmc150_spi_device(level_p = level1, mode_p = mode_p, verbosity_p = verbosity_p);

    /* 
     ***************************************************************************
     * reset the fpasim function
     ***************************************************************************
     */
    msg = "Reset the fpasim function";
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);
    fpasim_reset(level_p = level1, mode_p = mode_p, verbosity_p = verbosity_p);

    /* 
     ***************************************************************************
     * check all errors
     ***************************************************************************
     */
    //fpasim_check_all_errors(level_p=0, mode_p=0, verbosity_p=0);


    //---------------------------------------------------------------------
    // write in the SPI_CONF1 register
    //---------------------------------------------------------------------
    const spi_dac_tx_enable = 1;
    data = (spi_dac_tx_enable << 0);

    msg = "Enable the DAC TX";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    addr = FPASIM_ADDR_WIREIN['SPI_CONF1'];
    sendToFPA_debugSetWireIn(addr, data);


    /* 
     ***************************************************************************
     * Configure the FPASIM functions
     ***************************************************************************
     */

    msg = "Configure the fpasim function";
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);
    // set the register: FPASIM_Gain
    //   . 0 => 0.25 on the FPGA side
    //   . 1 => 0.5 on the FPGA side
    //   . 2 => 0.75 on the FPGA side
    //   . 3 => 1 on the FPGA side
    //   . 4 => 1.5 on the FPGA side
    //   . 5 => 2 on the FPGA side
    //   . 6 => 3 on the FPGA side
    //   . 7 => 4 on the FPGA side
    fpasim_gain = 0x3;
    msg = "Set register: FPASIM_GAIN";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureGain(fpasim_gain);

    // set the register: MUX_SQ_FB_DELAY
    mux_sq_fb_delay = 0x0;
    msg = "Set register: MUX_SQ_FB_DELAY";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureMuxDelay(mux_sq_fb_delay);


    // set the register: AMP_SQ_OF_DELAY
    amp_sq_of_delay = 0x0;
    msg = "Set register: AMP_SQ_OF_DELAY";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureAmpDelay(amp_sq_of_delay);

    // set the register: ERROR_DELAY
    error_delay = 0x0;
    msg = "Set register: ERROR_DELAY";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureErrorDelay(error_delay);

    // set the register: RA_DELAY
    ra_delay = 0x0;
    msg = "Set register: RA_DELAY";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureRaDelay(ra_delay);

    // set the register: TES_CONF
    nbPixels = 34;
    nbSamplesPerPixel = 40;
    totalFrameSize = nbPixels * nbSamplesPerPixel;

    nbPixels = nbPixels - 1; // add -1 because we start from 0
    nbSamplesPerPixel = nbSamplesPerPixel - 1; // add -1 because we start from 0
    totalFrameSize = totalFrameSize - 1; // add -1 because we start from 0
    msg = "Set register: TES_CONF";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureTES_conf(nbPixels = nbPixels, nbSamplesPerPixel = nbSamplesPerPixel, totalFrameSize = totalFrameSize);

    /*
     ***************************************************************************
     configure the mux_squid_tf RAM: ramp
      ***************************************************************************
      */
    msg = "Configure the mux_squid_tf RAM: ramp";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    mux_quid_tf_conf_ram();

    /*
     ***************************************************************************
     configure the amp_squid_tf RAM: ramp
      ***************************************************************************
      */
    msg = "Configure the amp_squid_tf RAM: ramp";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    amp_quid_tf_conf_ram();

    /*
     ***************************************************************************
     configure a ramp in the tes_steady_state
      ***************************************************************************
      */
    msg = "Configure the tes_steady_state RAM: max possible value";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    amp_quid_tf_conf_ram();
    tes_steady_state_conf_ram();
    /*
     ***************************************************************************
     Enable the fpasim function
      ***************************************************************************
      */
    session_name = getText("Enable the fpasim function");
    // Enable the fpasim funcion

    rst = 0;
    en = 1;
    data = fpasim_build_ctrl(rst_p = rst, en_p = en);
    msg = "Enable the FPASIM function";
    display(msg_p = msg, level_p = level1, mode_p = mode_p);
    sendToFPA_configureControl(data);




    /* 
     ***************************************************************************
     * Generate make_pulse commands
     ***************************************************************************
     */
    tempo = 1000; // tempo (in ms) between the make_pulse command
    nb_iteration = 5; // number of make_pulse command
    msg0 = "nb_iteration= " + nb_iteration.toString(10) + ", tempo= " + nb_iteration.toString(10);
    msg = "Generate make_pulse commands: " + msg0;
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);

    // declare tab
    pixel_id_tab = Array(nb_iteration);
    time_shift_tab = Array(nb_iteration);
    pulse_height_tab = Array(nb_iteration);

    // user-defined: edit indivual tab values.

    /*
        pulse_height_tab[4] = convert_percentage_to_pulse_heigth(percentage_p = 20);
        pulse_height_tab[3] = convert_percentage_to_pulse_heigth(percentage_p = 40);
        pulse_height_tab[2] = convert_percentage_to_pulse_heigth(percentage_p = 60);
        pulse_height_tab[1] = convert_percentage_to_pulse_heigth(percentage_p = 80);
        pulse_height_tab[0] = convert_percentage_to_pulse_heigth(percentage_p = 100);
    	
    	*/

    pulse_height_tab[4] = convert_percentage_to_pulse_heigth(percentage_p = 14);
    pulse_height_tab[3] = convert_percentage_to_pulse_heigth(percentage_p = 12);
    pulse_height_tab[2] = convert_percentage_to_pulse_heigth(percentage_p = 10);
    pulse_height_tab[1] = convert_percentage_to_pulse_heigth(percentage_p = 8);
    pulse_height_tab[0] = convert_percentage_to_pulse_heigth(percentage_p = 6);


    session_name = getText("Start loop");
    // loop
    for (i = 0; i < nb_iteration; i++) {
        iter = i + 1;
        msg = 'iteration: ' + iter.toString(10) + '/' + nb_iteration.toString(10);

        pixel_id = pixel_id_tab[i];
        time_shift = time_shift_tab[i];
        pulse_height = pulse_height_tab[i];

        session_name = getText("make_pulse iteration" + i.toString(10) + ", pulse_heigth:" + pulse_height.toString(16));

        sendToFPA_makePulse(pixelId = pixel_id, timeShift = time_shift, pulseHeigth = pulse_height);
        //data = fpasim_build_make_pulse(pixel_all_p=0, pixel_id_p=pixel_id, time_shift_p=time_shift, pulse_height_p=pulse_height);
        //fpasim_set_debug_wirein_by_name(reg_name_p="MAKE_PULSE", data_p=data, level_p=0, mode_p=0, verbosity_p=-1);


        // waitMs(tempo);
    }


    /* 
     ***************************************************************************
     * Generate make_pulses commands
     ***************************************************************************
     */
    tempo = 1000; // tempo (in ms) between the make_pulse command
    nb_iteration = 5; // number of make_pulse command
    msg0 = "nb_iteration= " + nb_iteration.toString(10) + ", tempo= " + nb_iteration.toString(10);
    msg = "Generate make_pulses commands: " + msg0;
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);

    // declare
    time_shift_tab = Array(nb_iteration);
    pulse_height_tab = Array(nb_iteration);
    /*
        pulse_height_tab[4] = convert_percentage_to_pulse_heigth(percentage_p = 20);
        pulse_height_tab[3] = convert_percentage_to_pulse_heigth(percentage_p = 25);
        pulse_height_tab[2] = convert_percentage_to_pulse_heigth(percentage_p = 30);
        pulse_height_tab[1] = convert_percentage_to_pulse_heigth(percentage_p = 40);
        pulse_height_tab[0] = convert_percentage_to_pulse_heigth(percentage_p = 100);
    	*/
/*
    pulse_height_tab[4] = convert_percentage_to_pulse_heigth(percentage_p = 10);
    pulse_height_tab[3] = convert_percentage_to_pulse_heigth(percentage_p = 12);
    pulse_height_tab[2] = convert_percentage_to_pulse_heigth(percentage_p = 10);
    pulse_height_tab[1] = convert_percentage_to_pulse_heigth(percentage_p = 12);
    pulse_height_tab[0] = convert_percentage_to_pulse_heigth(percentage_p = 100);
	*/
	
	 pulse_height_tab[4] = convert_percentage_to_pulse_heigth(percentage_p = 14);
    pulse_height_tab[3] = convert_percentage_to_pulse_heigth(percentage_p = 12);
    pulse_height_tab[2] = convert_percentage_to_pulse_heigth(percentage_p = 10);
    pulse_height_tab[1] = convert_percentage_to_pulse_heigth(percentage_p = 8);
    pulse_height_tab[0] = convert_percentage_to_pulse_heigth(percentage_p = 6);
	

    // user-defined: edit indivual tab values.


    // loop
    for (i = 0; i < nb_iteration; i++) {
        iter = i + 1;
        msg = 'iteration: ' + iter.toString(10) + '/' + nb_iteration.toString(10);

        time_shift = time_shift_tab[i];
        pulse_height = pulse_height_tab[i];
        session_name = getText("make_pulseS iteration" + i.toString(10) + ", pulse_heigth:" + pulse_height.toString(16));

        sendToFPA_makePulses(timeShift = time_shift, pulseHeigth = pulse_height);
        //data = fpasim_build_make_pulse(pixel_all_p=1, pixel_id_p=pixel_id, time_shift_p=time_shift, pulse_height_p=pulse_height);
        //fpasim_set_debug_wirein_by_name(reg_name_p="MAKE_PULSE", data_p=data, level_p=0, mode_p=0, verbosity_p=-1);



        //waitMs(tempo);
    }

    /* 
     ***************************************************************************
     * check all errors
     ***************************************************************************
     */
    msg = "Check Debug Errors";
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);
    fpasim_check_all_errors(level_p = level1, mode_p = 0, verbosity_p = 0);

    /* 
     ***************************************************************************
     * End of Test
     ***************************************************************************
     */
    msg = "End of Test";
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);

}

main();