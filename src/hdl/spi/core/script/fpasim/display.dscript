// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Ken-ji de la Rosa, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE Focal Plane Assembly simulator.
//
//                              fpasim-fw is free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                   kenji.delarosa@alten.com
//    @file                   display.dscript
// -------------------------------------------------------------------------------------------------------------
//    Automatic Generation    No
//    Code Rules Reference    
// -------------------------------------------------------------------------------------------------------------
//    @details                
//    This javascript defines the Display functions.
//    This class provides methods to print in the console (coloring, indentation, ...).
//
// -------------------------------------------------------------------------------------------------------------

const CHAR_SECTION = "*";
const NB_CHAR_SECTION = 70;
const CHAR_INDENT = " ";
const NB_CHAR_INDENT = 4;

/**
 * Repeat a String
 * @param {string} str_p - string to repeat
 * @param {number} nb_times_p - number of times for the repeating
 * @return {string} The repeating string
 */
function duplicate_str(str_p,nb_times_p)
{
	str0 = "";
	for (var i = 0; i < nb_times_p; i++) {
		str0 += str_p;
	}
	return str0;
}



/**
 * Print a Title
 * @param {string} msg_p - Title to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
	function display_title(msg_p, level_p, mode_p, color_p)
	{

		// default function parameter values
		if (typeof(level_p)==='undefined') level_p = 0;
		if (typeof(mode_p)==='undefined') mode_p = 0;
		if (typeof(color_p)==='undefined') color_p = 'yellow';

		// color = colors[color_p];
		// color_rst = colors['reset'];
		msg_array = _convert_str_to_array(msg_p=msg_p)
		str_indent = duplicate_str(str_p=CHAR_INDENT,nb_times_p =NB_CHAR_INDENT * level_p);
		str_char = duplicate_str(str_p=CHAR_SECTION,nb_times_p = NB_CHAR_SECTION);
		// str_sep = color + str_indent + str_char;
		str_sep = str_indent + str_char;

		print('');
		print(str_sep);
		for (var i=0;i<msg_array.length;i++)
		{
			msg = msg_array[i];
			// str0 = color + str_indent + ' ' + msg;
			str0 = str_indent + ' ' + msg;
			print(str0);
		}
		// print(str_sep + color_rst);
		print(str_sep);

	}

/**
 * Print a subTitle
 * @param {string} msg_p - subTitle to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
	function display_subtitle(msg_p, level_p, mode_p, color_p)
	{

		// default function parameter values
		if (typeof(level_p)==='undefined') level_p = 0;
		if (typeof(mode_p)==='undefined') mode_p = 0;
		if (typeof(color_p)==='undefined') color_p = 'yellow';


		// color = colors[color_p];
		// color_rst = colors['reset'];
		msg_array = _convert_str_to_array(msg_p=msg_p)
		str_indent = duplicate_str(str_p=CHAR_INDENT,nb_times_p =NB_CHAR_INDENT * level_p);
		str_char = duplicate_str(str_p=CHAR_SECTION,nb_times_p = NB_CHAR_SECTION);
		// str_sep = color + str_indent + str_char;
		str_sep = str_indent + str_char;

		print('');
		for (var i=0;i<msg_array.length;i++)
		{
			msg = msg_array[i];
			// str0 = color + str_indent + ' ' + msg;
			str0 = str_indent + ' ' + msg;
			print(str0);
		}
		// print(str_sep + color_rst);
		print(str_sep);
	}

/**
 * Print a message
 * @param {string} msg_p - message to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
	function display(msg_p, level_p, mode_p, color_p)
	{

		// default function parameter values
		if (typeof(level_p)==='undefined') level_p = 0;
		if (typeof(mode_p)==='undefined') mode_p = 0;
		if (typeof(color_p)==='undefined') color_p = 'reset';

		// color = colors[color_p]
		// color_rst = colors['reset']
		msg_array = _convert_str_to_array(msg_p=msg_p)
		str_indent = duplicate_str(str_p=CHAR_INDENT,nb_times_p =NB_CHAR_INDENT * level_p);

		for (var i=0;i<msg_array.length;i++)
		{
			msg = msg_array[i];
			// str0 = color + str_indent + ' ' + msg + color_rst
			str0 = str_indent + ' ' + msg;
			print(str0);
		}
	}

/**
 * Display errors
 * @param {string} msg_p - message to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
	function display_error(msg_p, level_p, mode_p, color_p)
	{

		// default function parameter values
		if (typeof(level_p)==='undefined') level_p = 0;
		if (typeof(mode_p)==='undefined') mode_p = 0;
		if (typeof(color_p)==='undefined') color_p = 'reset';

		level0 = level_p;
		level1 = level_p + 1;

		msg = "Errors"
		display_title(msg_p=msg, level_p=level0, mode_p=mode_p);
		// color = colors[color_p]
		// color_rst = colors['reset']
		msg_array = _convert_str_to_array(msg_p=msg_p)
		str_indent = duplicate_str(str_p=CHAR_INDENT,nb_times_p =NB_CHAR_INDENT * level1);

		for (var i=0;i<msg_array.length;i++)
		{
			msg_tmp = msg_array[i];
			// str0 = color + str_indent + ' ' + msg_tmp + color_rst
			str0 = str_indent + ' ' + msg_tmp;
			print(str0);
		}
	}
	

	/**
	 * Convert the input string into an string array
	 * @param {string} msg_p - message to print (string or array of strings)
	 * @param {number} level_p - level of indentation at the beginning
	 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
	 * @return {string} array of string - array of string
	 */
	function _convert_str_to_array(msg_p)
	{
		if (typeof msg_p === 'string')
           {
				msg = [msg_p];
           }
		else
		{
			msg = msg_p;
		}
		return msg;
	}


//---------------------------------------------------------------------------------------